<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elim Kwan</title>
  
  
  <link href="http://elimkwan.github.io/atom.xml" rel="self"/>
  
  <link href="http://elimkwan.github.io/"/>
  <updated>2020-11-05T22:12:43.049Z</updated>
  <id>http://elimkwan.github.io/</id>
  
  <author>
    <name>Elim Kwan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building PS-like Filters (and more) with Python</title>
    <link href="http://elimkwan.github.io/2020/11/01/pythonImgEnhance/"/>
    <id>http://elimkwan.github.io/2020/11/01/pythonImgEnhance/</id>
    <published>2020-11-01T20:56:17.000Z</published>
    <updated>2020-11-05T22:12:43.049Z</updated>
    
    <content type="html"><![CDATA[<p>This post documented how we recreate Photoshop-like filter from scratch with Python. Including fundamental concepts from image processing: Histogram Equalisation, Laplcian Pyramid Blending, Possion Blending etc. (As the work is still under evaluation in university, code has not been published yet~)</p><h1 style="color:#7ecaf6;"> Histogram Equalisation with numpy.bincount() </h1><br><div style="width:800px; margin:0 auto;"><img src="https://www.dropbox.com/s/9d7n4fodwyub4di/python-imgenh-task1.png?raw=1" width="800"></div><br><p>Histogram equalisation helps enhance the image to be more vivid. It improves the global contrast of the images by allowing area with low local contrast to gain a higher contrast. Without using .equalize_hist() functions, it can be implemented with:<li> Step 1: Compute an image histogram with numpy.bincount()</li><li> Step 2: Compute a normalized cumulative histogram</li><li> Step 3: Use the cumulative histogram to map pixels to the new values as a lookup table</li></p><br><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc calculating histogram</span><br></pre></td></tr></table></figure><p>Comparing the resultant images above, it is noticeable that different processing techniques have their own features. Firstly, “Processing each channel separately” will in general correct the overall colour of the images. Secondly, “Process value channel in HSV colour space” will results in a slightly darker foreground compare to “Grey-scaled + colour ratio”. The front building and the wall with the graffiti is bright for the “Grey-scaled + colour ratio” image than that of “Process value channel in HSV colour space” image. </p><br><br><br><br><h1 style="color:#7ecaf6;"> Alpha Blending </h1><br><div style="width:800px; margin:0 auto;"><img src="https://www.dropbox.com/s/94uiz2z7uopyrcm/python-imgenh-task2.png?raw=1" width="800"></div><br><p>The objective is to combine two images into one so that the content is “stitched” together in a possibly seamless manner. The alpha mask (for the left-hand side image) is:</p><div style="width:800px; margin:0 auto;"><img src="https://www.dropbox.com/s/z5hidjfiwvvlsyz/python-imgenh-task2-2.png?raw=1" width="800"></div><p>which essential states that within the window, we would like the value of the mask gradually decrease from 1 to 0. For the right-hand side image, the mask would just be (1 – α1).</p><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc alpha mask</span><br></pre></td></tr></table></figure><h1 style="color:#7ecaf6;"> Pyramid Blending </h1><p><br><div style="width:1200px; margin:0 auto;"><img src="https://www.dropbox.com/s/5342hddnpxm9js5/python-imgenh-task3-2.png?raw=1" width="1200"></div><br>Although alpha blending is simple, designing an ideal alpha blending mask for any kind of image is difficult. The transition region in the blending mask should be relatively large when blending smooth regions to avoid visible seams. But when blending small structures, you want to use a small transition region to avoid ghosting. For a robust method that can handle both smooth regions and a high-frequencystructure, Laplacian pyramid is used.  Both images are decomposed into Laplacian pyramids and the levels from both pyramids are blended one-by-one, using a different alpha mask. As lower frequencies have a larger spatial extend, the transition for those frequencies should be smoother. Higher frequencies have a smaller spatial extend and they need a sharper transition. Above shows how a cat images is being decomposed into different levels of Laplacian pyramids. And below are the code for decomposing images into different levels, following with the function that expands them. </p><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#tbc gausspyr_reduce </span><br><span class="line">#tbc gausspyr_expand</span><br></pre></td></tr></table></figure><p>The difference between alpha blended image and pyramid blending images may not be apparent at first glance, but we can see that alpha blending has a gradual transition at all time across the boundary. While for pyramid blending, the background has a more gradual transition, but the objects part has a sharper transition. And this allow us to retain the details of the original object as much as possible, while having a smooth blending for the background. The window size was intentionally set to quite narrow to produce a more distinguish blending results. </p><br><div style="width:800px; margin:0 auto;"><img src="https://www.dropbox.com/s/7ydgyzxeovj4s3v/python-imgenh-task3-3.png?raw=1" width="800"></div><br><br><br><br><br><h1 style="color:#7ecaf6;"> Gradient Domain Image Enhancement </h1><div style="width:800px; margin:0 auto;"><img src="https://www.dropbox.com/s/trfup5u6oxkpdad/python-imgenh-task5.png?raw=1" width="800"></div><p>The general motivation behind the gradient-based methods is that the human visual system is more sensitive to pixel differences (gradients) than absolute pixel values. Therefore, operations performed on image gradients should focus on visually important information and potentially produce more plausible results. Thus, we would like to perform image enhancement in the gradient domain and reconstruct the image from the modified gradient field.</p><li>Step 1: Extract gradient field from input images.</li><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc </span><br></pre></td></tr></table></figure><li>Step 2: Modifying the gradient field</li><br><div style="width:400px; margin:0 auto;"><img src="https://www.dropbox.com/s/dsggzr2gp9ev2nk/python-imgenh-task5-2.png?raw=1" width="400"></div><br><p> The gradient field is modified based on the function shown above</p><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc </span><br></pre></td></tr></table></figure><li>Step 3: Reconstruct image from gradient field</li><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc </span><br></pre></td></tr></table></figure><br><br><br><br><h1 style="color:#7ecaf6;"> Gradient domain Copy & Paste - Possion Blending </h1><div style="width:1200px; margin:0 auto;"><img src="https://www.dropbox.com/s/wbio13feqkumy2o/python-imgenh-task6.png?raw=1" width="1200"></div><br>The gradient domain copy & paste operations (seamless cloning) from the paper by Pérez et al "Poisson Image Editing" is being implemented. A similar method is also used for the healing brush tool in Adobe Photoshop. The basic idea behind this method is to copy the portion of the gradient field from the source image to the target image and then solve for the pasted pixels. However, to ensure that the pasted region seamlessly merges into the target, the values of the pixels that belong to the edge of the pasted region need to be (soft-)constrained so that their values are close to the pixel values in the target image.<figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tbc </span><br></pre></td></tr></table></figure><h3>Key Skills developed:<h3><button>#Python</button>  <button>#Numpy</button>  <button>#Computer Vision</button> </h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This post documented how we recreate Photoshop-like filter from scratch with Python. Including fundamental concepts from image processing</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web development at Barclays</title>
    <link href="http://elimkwan.github.io/2019/08/05/barclaysWeb/"/>
    <id>http://elimkwan.github.io/2019/08/05/barclaysWeb/</id>
    <published>2019-08-05T00:33:57.000Z</published>
    <updated>2020-11-05T22:12:43.046Z</updated>
    
    <content type="html"><![CDATA[<p>This summer, I have joined Barclays as Technical Developer Summer Analyst. It was a challenging, yet rewarding experience.</p><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> As a Developer in Barclays ...</h1>JIRA and different planning tools has gained increasing popularity and are particularly useful for managing big and complicated projects. Therefore, we, as a group of interns, are developing an agile estimating tool from scatch for our internal clients.<br><br>Stacks used: <li>Angular for front end</li><li>Golang for backend</li><li>Deployed on Amazon EC2 Instance and Fargate</li><br><p>I started off with front end development, building up features and styling pages with Angular Material Modules. I then moved on to work on integration with the back end, sending HTTP requests to store and retrieve information from the server. After that, I also tried out Golang and worked on the user management system at the backend server. </p><p>Entering phase two of the project, we started to deploy it with Amazon AWS EC2 instances and Fargate. With deployment on the fly, we had a hard time catching up with front-end testing. Lesson of the day is we should not leave unit tests till the last minute. In addition, we also started to have proper JIRA and sprint planning session, using the very own tool that we developed for planning our project. This hugely improved our efficiency and is a rewarding moment for the team because we are using the product that we developed.  I have also gained more understanding on Barclays DevOps procedures and processes. </p><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Other Business Objectives </h1>The internship is not just about coding. I have also attended a lot of trainings and networking sessions. To name but just a few:<li>a) Risk and Financial training</li><li>b) Quantative Analysis</li><li>c) Machine Learning</li><li>d) Cyber Security</li><li>e) Crytography</li><li>f) Ventures</li><p>In addition, I have also scheduled meetings with various directors and managing directors to understand more about their views on future tech, business and their roles, which are quite insightful and inspiring. Overall, I have met so many amazing people via this intership and it enriched my skillsets, offered me an intriguing insight into the daily work of a developer at Barclays. Surely, it is a summer well spent. </p><br><br><br><h3>Key Skills developed:<h3><button>#FrontEnd</button>  <button>#BackEnd</button>  <button>#Angular</button>  <button>#GoLang</button>  <button>#API</button><br><br><button>#JIRA</button>  <button>#Git Flow</button>  <button>#Unit testing</button>  <button>#E2E testing</button>  <button>#AWS</button><br><br><button>#Teamwork</button>  <button>#Finance</button>  <button>#Banking</button>  <button>#Communication</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This summer, I have joined Barclays as Technical Developer Summer Analyst. It was a challenging, yet rewarding experience.&lt;/p&gt;
&lt;br&gt;
&lt;h1 s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Research at Bristol Robotic Lab</title>
    <link href="http://elimkwan.github.io/2019/08/05/brlResearch/"/>
    <id>http://elimkwan.github.io/2019/08/05/brlResearch/</id>
    <published>2019-08-05T00:33:40.000Z</published>
    <updated>2020-11-05T22:12:43.047Z</updated>
    
    <content type="html"><![CDATA[<p>This summer, I had spent six weeks at Bristol Robotics Labratories working with the <a href="https://www.bristolroboticslab.com/tactile-robotics" target="_blank" rel="noopener">Tactile Robotics Group</a>. I collaborated with Professor Nathan Lepora to develop applications for cutting-edge tactile sensor – TacTip. </p><p>“TacTip” is a state-of-the-art tactile sensor that enables human-like tactile dexterity while being built from inexpensive components. It is composed of an image sensor and 3D-printed pins on soft rubber-like material. By tracking the movements of the pins, deformation details of the fingertip could be retrieved as shown in the video below. </p><p>The aim of the summer research project is to implement a manually-controlled wearable version of TacTip. To achieve this, the team has worked on the minimization of TacTip and the integration with robotics hand. It is hoped that by replacing its original finger tips with TacTip, a wearable robotics hand with sense of touch could be created. The end product would be used by researchers to build a more comprehensive database for training the machine learning model of gripping and object recognition. The project can widen the range of applications of TacTip, showcasing the capability of the tactile fingertip and its potential applications in many other fields, such as healthcare, manufacturing, smart homes etc.</p><div class="video-container"><iframe src="//www.youtube.com/embed/5nhZSoBW4oM" frameborder="0" allowfullscreen></iframe></div><br><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Minimisation of TacTip </h1><p>Substantial research had been conducted on different micro cameras and camera models, such that the size of the image sensor in TacTip could be reduced. The research enhanced the team understandings on the sensor’s output and the analogue-to-digital (ADC) circuits in cameras models, which helped us rule out the possibility of re-creating our own ADC circuits.</p><br><img src="https://www.dropbox.com/s/xi5c4o4udiprpdo/brl-tactip.JPG?raw=1" width="500" height="300"><p> The size of minimised TacTip is similar to human finger tip.</p><br><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Integration with Robotics Hand</h1><div class="video-container"><iframe src="//www.youtube.com/embed/nua1shoghes" frameborder="0" allowfullscreen></iframe></div><br><p>I tried to reverse-engineer some of the common robotics hand designs. The finger designed was realized with 3D-printing(multimaterial print) technology and manually controlled as shown in the video. The successful implementation of the finger prototype in a week time is one of the most significant achievements throughout the internship. With only the given finger and limited experiences in 3D modelling, I started with using calliper to measure all the dimensions and try to model it in Fusion 360. The first trial of the fingers would not even fit together. Yet, with continuous product evaluation, keeping track of the pros and cons of every design and try to eliminate the cons in the next iterations, the final version (as shown in the video) works quite well. A modular and systematic approach had greatly speeded up the development process. </p><br><p>The finger prototype developed can also be driven by an Arduino servo motor. </p><img src="https://www.dropbox.com/s/8ba14n58ulkydzg/brl-motor.JPG?raw=1" width="965" height="600"><br><br><p>Through these six weeks, I have learnt much more about mechanic designs, multi-material 3D printing, image sensors and research techniques. Since by analysing the tactile hologram created, information related to sensor deformation could be retrieved, I have also gained much insights about the use of artificial intelligence and computer vision in TacTip. Furthermore, working at Bristol Robotics Laboratory allows me witness many state-of-the-art robots and advance technology, which is surely an eye-opening experience. </p><br><br><br><br><p><small>Image on thumbnail is with reference to B. Winstone, G. Griffiths, T. Pipe,C. Melhuish, and J. Rossiter "TACTIP - Tactile Fingertip Device, Texture Analysis through Optical Tracking of Skin Features" LNCS, Vol. 8064 ,(2013)</small></p><br><h3>Key Skills developed:<h3> <button>#Robotics</button> <button>#3D Printing</button>  <button>#3D Modelling</button>  <button>#Fusion360</button>  <button>#Arduino</button><br><br><button>#Hardware prototype</button><button>#Micro sensor</button>  <button>#Image Sensor</button>  <button>#Embedded System</button>  <br><br><button>#Electronics</button> <button>#R&D</button> </h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;
This summer, I had spent six weeks at Bristol Robotics Labratories working with the &lt;a href=&quot;https://www.bristolroboticslab.com/tactile-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Rubik&#39;s Cube Solving Robot</title>
    <link href="http://elimkwan.github.io/2019/08/05/cube/"/>
    <id>http://elimkwan.github.io/2019/08/05/cube/</id>
    <published>2019-08-05T00:32:54.000Z</published>
    <updated>2020-11-05T22:12:43.047Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/Fook-gANs6U" frameborder="0" allowfullscreen></iframe></div><br><br>This is our Rubik's Cube Solver project! The work was divided into several parts: implementing colour recognition; obtaining the solving algorithm and designing the GUI; interpretation of signal and lter circuits; implementation of logic and corresponding logic circuits; and design of physical elements and mechanical manipulation.<br><img src="https://www.dropbox.com/s/n6zv8rm1eheshj2/cube-overall.png?raw=1" width="1080" height="200"><br>I was in charged of mainly the following two aspects: <br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Embedded Circuits with PCB prototype </h1>The most interesting constraint of the project is that only analog output is allowed from the computer, yet, when translating the analog signal to PWM input for motors, no MCU/Arduino is allowed. Therefore, we had constructed our own analog-to-digital circuit with D-latches and 555 timer.<br><br><h3>Overview of the circuit</h3><img src="https://www.dropbox.com/s/e2ibao4k4r9buzb/cube-circuit.png?raw=1" width="1080" height="750"><br><br><p>We had gone through many engineering cycles and design iterations to evolve our circuits. We first started off with bread board. As we gained confident in our design, we started to build stripboard prototype as well. Furthermore, with pcb development experience from previous work, I also managed to develop the pcb version of our circuit.<br><br><br><br></p><h3>Hardware Prototypes</h3><img src="https://www.dropbox.com/s/359e7hs1ahr9qdk/cube-strip-board.jpg?raw=1"> &nbsp  &nbsp  &nbsp<img src="https://www.dropbox.com/s/mxc3y1lkoutovbj/cube-pcb.jpg?raw=1"><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Colour Recognition System </h1>Colour recognision is one of the main blockers of the project. The slightest change in light intensity drastically changes the RGB value. To complete the project within the specified time frame, I refactored the colour recognition code from my team mates, and we had also came up with the following solutions to alleviate the problem:<li> The interior of the box in which the cube is housed is spray painted white and dim lights are distributed evenly around within the box, the aim of this is to have a consist brightness within the box.</li><li> Change the colour space from RGB to HSV</li><li> Random seed averaging approach</li><p>Random seed averaging approach means when pixels are picked from each tiles to calculated RGB average, instead of hard-coded the locations the pixels, pixels are picked randomly with in the tiles. This hugely improved the accuracy of the code. Also, with random seed approach, each run could potentially yield different results, thus, we can retry multiple times until we had successfully detected a valid scrambled cube configuarion.</p><p>Full code can be found on <em><a href="https://github.com/elimkwan/Python-RubiksCubeColourRecognition" target="_blank" rel="noopener">GITHUB</a></em></p><br><br><br><h3>Key Skills developed:<h3><button>#Hardware Prototype</button>  <button>#Sequential Circuit</button><br><br><button>#Embedded Circuits</button>  <button>#Soldering</button><br><br><button>#Image Processing</button>  <button>#Computer Vision</button><br><br><button>#Software</button>  <button>#Python</button>  <button>#Teamwork</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Fook-gANs6U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
Thi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Very-Large-Scale Integration with Cadence</title>
    <link href="http://elimkwan.github.io/2019/08/05/vlsiCadence/"/>
    <id>http://elimkwan.github.io/2019/08/05/vlsiCadence/</id>
    <published>2019-08-05T00:32:50.000Z</published>
    <updated>2020-11-05T22:12:43.050Z</updated>
    
    <content type="html"><![CDATA[<p>In the Very-Large-Scale Integration unit, I have had the chance to use the Cadence design environment and the Virtuoso tool set for full-custom IC design based on the Cadence tool set and the 0.35 um CMOS process from AMS. </p><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Circuit Design using Schematic Entry </h1><li>Create circuit-level schematics using transistors and passives and carry out transient simulations</li><li>Observing the difference between simulated and calculated values for high-to-low and low-to-high transcient delay, which can be accounted for as the calculation did not consider the internal node capacitance.</li><br><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Layout </h1><li>Construct the layout for a inverter cell(as shown in the fig) and  a two-input NOR(NOR2) gate.</li><li>Use of Cadence Layout XL tool.</li><li>Minimize NOR2 layout with diffusion sharing techniques. (e.g. Share diffusion regions for PMOS FETs and Share diffusion regions for NMOS FETs)</li><br><img src="https://www.dropbox.com/s/xazm93c32fog7jq/vlsi-invlayout.png?raw=1" width="240" height="375"><img src="https://www.dropbox.com/s/d0gc270i7umlc35/vlsi-layout.png?raw=1" width="540" height="375"><br><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Advanced Simulation and Verification Techniques </h1><li>Build a parameterised cell and simulate it</li><li>Run parametric analyses and sweeps</li><li>Quantify effect of parametric variations through corner analyses and Monte Carlo simulations(as shown in the figure)</li><br><img src="https://www.dropbox.com/s/pnk7ru8jo3bfpvl/vlsi-MonteCarlo.png?raw=1" width="600" height="350"><br><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Tasks in Chip Assembly </h1><li>Design of input and output pads, guard rings, and input/output circuits</li><br><br><br><h3>Key Skills developed:<h3><button>#Cadence Virtuoso</button>  <button>#ARMS</button> <button>#IC Design</button>  <br><br><button>#Design and Verification</button> <button>#Chips Layout</button> <button>#VLSI</button> <br><br><button>#Hardware</button> <button>Digital Electronics</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;
In the Very-Large-Scale Integration unit, I have had the chance to use the Cadence design environment and the Virtuoso tool set for full</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Separate noise from audio with linear filter</title>
    <link href="http://elimkwan.github.io/2019/08/05/matlabFftFilter/"/>
    <id>http://elimkwan.github.io/2019/08/05/matlabFftFilter/</id>
    <published>2019-08-05T00:31:44.000Z</published>
    <updated>2020-11-05T22:12:43.048Z</updated>
    
    <content type="html"><![CDATA[<p>This project shows how we can apply spectra analysis technicals to create a digital filter that filter away the unwanted frequency in audio.</p><br>Input Audio<br><iframe frameborder="0" width="400" height="50" src="https://drive.google.com/file/d/1CZGguEngjqUYdCFbc_o3nXHMx_O8c5ks/preview">    </iframe><br>Output Audio<br><iframe frameborder="0" width="400" height="50" src="https://drive.google.com/file/d/1cJlmOxJzSeSXmcnTQ6WG1yZFz0o2Oy_M/preview">    </iframe><br><br><br><br><p>By plotting the frequency spectrum of the input signal, we can identify that the noise lies at 835Hz, 1530Hz.<br><img src="https://www.dropbox.com/s/wath67u2gqixnfv/fft-input-spec.jpg?raw=1" width="1080" height="500"></p><p>Since sampling frequency is 44100Hz and normalised frequency is calculated by 2* pi * frequency/ sampling frequency, the noise component lie at angular frquency 0.11(835Hz), 0.22(1530Hz). Poles and zeros should be placed at amplitude*e^(angular frequency) on the Pole Zero diagram as shown below. Amplitude of Zeros should be larger than pole in order to attenuate the signal.<br><img src="https://www.dropbox.com/s/i5rq6xxbehbvi8y/fft-poles.jpg?raw=1" width="600" height="500"></p><p>The filter will then behave as follows. Normalised frquency is calculated by frequency/ sampling frequency. Therefore, we saw a dip in amplitude at normalised frequency 0.01(835Hz) and 0.03(1530Hz) in the filter amplitude response graph.<br><img src="https://www.dropbox.com/s/hse25nsddx068e1/fft-filter-response.jpg?raw=1" width="1080" height="400"></p><p>Upon applying the filter to the input signal, we can compare the difference between the input and output frequency spectrum. Noise component (835Hz, 1530Hz) no longer exist in the frequency spectrum of the output signal!<br><img src="https://www.dropbox.com/s/x031nbs6cwjvmk3/fft-output-spectrum.jpg?raw=1" width="1080" height="500"></p><p>The detailed code is as follows:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[xn fs]=audioread(<span class="string">'input.wav'</span>);</span><br><span class="line">                   </span><br><span class="line">T = <span class="number">1</span>/fs;             <span class="comment">% Sampling period       </span></span><br><span class="line">L = <span class="built_in">length</span>(xn);       <span class="comment">% Length of signal</span></span><br><span class="line">t = (<span class="number">0</span>:L<span class="number">-1</span>)*T;        <span class="comment">% Time vector</span></span><br><span class="line"></span><br><span class="line">Li = L </span><br><span class="line">t1 = t(<span class="number">1</span>:Li);</span><br><span class="line">xn1 = xn(<span class="number">1</span>:Li);</span><br><span class="line"></span><br><span class="line">Y1 = fft(xn1);</span><br><span class="line">P2a = <span class="built_in">abs</span>(Y1/Li);</span><br><span class="line">P1a = P2a(<span class="number">1</span>:Li/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>) = <span class="number">2</span>*P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">f1 = fs*(<span class="number">0</span>:(Li/<span class="number">2</span>))/Li;</span><br><span class="line"></span><br><span class="line"><span class="comment">%in frequency domain</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(f1,P1a) </span><br><span class="line">title(<span class="string">'Sample 3a Spectrum'</span>)</span><br><span class="line">xlabel(<span class="string">'f (Hz)'</span>)</span><br><span class="line">ylabel(<span class="string">'|P1(f)|'</span>)</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">5000</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 147 220 294 349.7 440 835 1530</span></span><br><span class="line"><span class="comment">%Sample 3a remove noise at 835Hz, 1530Hz</span></span><br><span class="line"></span><br><span class="line">f1 = <span class="number">835</span></span><br><span class="line">f2 = <span class="number">1530</span></span><br><span class="line">fs = <span class="number">44100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zer = <span class="number">1</span>*<span class="built_in">exp</span>(<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*[-f1/fs f1/fs -f2/fs f2/fs]'); </span><br><span class="line">pol = <span class="number">0.9</span>*<span class="built_in">exp</span>(<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*[-f1/fs f1/fs -f2/fs f2/fs]');</span><br><span class="line"></span><br><span class="line">zplane(zer,pol)</span><br><span class="line">[b1,a1] = zp2tf(zer,pol,<span class="number">1</span>);</span><br><span class="line">fvtool(b1,a1)</span><br><span class="line"></span><br><span class="line"><span class="comment">%apply filter</span></span><br><span class="line">x1f = filter(b1, a1, xn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%filtered data in frequency</span></span><br><span class="line"><span class="comment">%L1 = round(0.2/T);</span></span><br><span class="line">Li = L </span><br><span class="line">t1 = t(<span class="number">1</span>:Li);</span><br><span class="line">yn1 = x1f(<span class="number">1</span>:Li);</span><br><span class="line"></span><br><span class="line">Y1 = fft(yn1);</span><br><span class="line">P2a = <span class="built_in">abs</span>(Y1/Li);</span><br><span class="line">P1a = P2a(<span class="number">1</span>:Li/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>) = <span class="number">2</span>*P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">f1 = fs*(<span class="number">0</span>:(Li/<span class="number">2</span>))/Li;</span><br><span class="line"></span><br><span class="line"><span class="comment">%filtered data in frequency domain</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(f1,P1a) </span><br><span class="line">title(<span class="string">'Filtered Sample 3a Spectrum'</span>)</span><br><span class="line">xlabel(<span class="string">'f (Hz)'</span>)</span><br><span class="line">ylabel(<span class="string">'|P1(f)|'</span>)</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">5000</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%playing filtered sample 3a</span></span><br><span class="line">p = audioplayer(x1f, fs);</span><br><span class="line">play(p);</span><br><span class="line">audiowrite(<span class="string">'filtered_output.wav'</span>,x1f,fs)</span><br></pre></td></tr></table></figure><br><br><br><h3>Key Skills developed:<h3><button>#Digital Filter</button>  <button>#MATLAB</button>  <button>#FFT</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This project shows how we can apply spectra analysis technicals to create a digital filter that filter away the unwanted frequency in aud</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Determine musical notes with spectral analysis techniques</title>
    <link href="http://elimkwan.github.io/2019/08/05/matlabFftAnalysis/"/>
    <id>http://elimkwan.github.io/2019/08/05/matlabFftAnalysis/</id>
    <published>2019-08-05T00:31:35.000Z</published>
    <updated>2020-11-05T22:12:43.048Z</updated>
    
    <content type="html"><![CDATA[<p>Spectral analysis techniques could be used to determine the musical notes, even when they are overlapping. The MATLAB code below would generate a graphs of the audio in time and frequency domain. By observing the first three lowest frequencies peaks in the frequency domain, the notes in the chord could be found. The trick part is to ignore the peaks formed by the summation of two second harmonics.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line"></span><br><span class="line">[xn fs]=audioread(<span class="string">'sample.wav'</span>);</span><br><span class="line">                   </span><br><span class="line">T = <span class="number">1</span>/fs;             <span class="comment">% Sampling period       </span></span><br><span class="line">L = <span class="built_in">length</span>(xn);       <span class="comment">% Length of signal</span></span><br><span class="line">t = (<span class="number">0</span>:L<span class="number">-1</span>)*T;        <span class="comment">% Time vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%in time domain all</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,xn);</span><br><span class="line">title(<span class="string">'Signal in time'</span>);</span><br><span class="line">xlabel(<span class="string">'t(seconds)'</span>);</span><br><span class="line">ylabel(<span class="string">'X(t)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%Chord 1</span></span><br><span class="line"><span class="comment">%L1 = round(0.2/T);</span></span><br><span class="line">Li = <span class="built_in">round</span>(L/<span class="number">5</span>)<span class="number">-1</span> <span class="comment">%9280</span></span><br><span class="line">t1 = t(<span class="number">1</span>:Li);</span><br><span class="line">xn1 = xn(<span class="number">1</span>:Li);</span><br><span class="line"></span><br><span class="line">Y1 = fft(xn1);</span><br><span class="line">P2a = <span class="built_in">abs</span>(Y1/Li);</span><br><span class="line">P1a = P2a(<span class="number">1</span>:Li/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>) = <span class="number">2</span>*P1a(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">f1 = fs*(<span class="number">0</span>:(Li/<span class="number">2</span>))/Li;</span><br><span class="line"></span><br><span class="line"><span class="comment">%Chord1 in time domain</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(t1,xn1)</span><br><span class="line">title(<span class="string">'Chord 1 in time'</span>)</span><br><span class="line">xlabel(<span class="string">'t(seconds)'</span>)</span><br><span class="line">ylabel(<span class="string">'X(t)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%Chord 1 in frequency domain</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(f1,P1a) </span><br><span class="line">title(<span class="string">'Chord 1 Spectrum'</span>)</span><br><span class="line">xlabel(<span class="string">'f (Hz)'</span>)</span><br><span class="line">ylabel(<span class="string">'|P1(f)|'</span>)</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">5000</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">%Chord 1</span></span><br><span class="line"><span class="comment">%[165 205 245]</span></span><br><span class="line"><span class="comment">%[164.81 207.65 246.84]</span></span><br></pre></td></tr></table></figure><br><br><br><h3>Key Skills developed:<h3><button>#Spectral Analysis</button>  <button>#MATLAB</button>  <button>#FFT</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spectral analysis techniques could be used to determine the musical notes, even when they are overlapping. The MATLAB code below would ge</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bit Error Rate Analysis</title>
    <link href="http://elimkwan.github.io/2019/08/05/matlabBER/"/>
    <id>http://elimkwan.github.io/2019/08/05/matlabBER/</id>
    <published>2019-08-05T00:31:20.000Z</published>
    <updated>2020-11-05T22:12:43.048Z</updated>
    
    <content type="html"><![CDATA[<p>Using MATLAB code to simulate QPSK communication system, and displaying BER graphs of other modulation schemes. For instance, the program compares the theoretical and simulation performance of QPSK system and the performance of QPSK and 16QAM in Rayleigh Fading.</p><img src="https://www.dropbox.com/s/r912qboc14rr8tz/ber-sim.jpg?raw=1"><p><em>Example code of plotting Rayleigh Fading graph</em></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%----------------------------Rayleigh Fading----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">EbNo_dB = <span class="number">0</span>:<span class="number">2</span>:<span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">BER_QPSK = berawgn(EbNo_dB,<span class="string">'psk'</span>,<span class="number">4</span>,<span class="string">'nondiff'</span>);</span><br><span class="line">semilogy(EbNo_dB,BER_QPSK)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line">BER_16QAM = berawgn(EbNo_dB,<span class="string">'qam'</span>,<span class="number">16</span>);</span><br><span class="line">semilogy(EbNo_dB,BER_16QAM)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line">BER_QPSK_RAY = berfading(EbNo_dB,<span class="string">'psk'</span>,<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line">semilogy(EbNo_dB,BER_QPSK_RAY)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line">BER_16QAM_RAY = berfading(EbNo_dB,<span class="string">'qam'</span>,<span class="number">16</span>,<span class="number">1</span>);</span><br><span class="line">semilogy(EbNo_dB,BER_16QAM_RAY)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">'EbNo(dB)'</span>);</span><br><span class="line">ylabel(<span class="string">'Bit Error Rate'</span>);</span><br><span class="line">set(findall(gca, <span class="string">'Type'</span>, <span class="string">'Line'</span>),<span class="string">'LineWidth'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title(<span class="string">'Performance of QPSK and 16QAM in Rayleigh Fading'</span>);</span><br><span class="line"><span class="built_in">legend</span>(&#123;<span class="string">'QPSK'</span>,<span class="string">'16QAM'</span>,<span class="string">'QPSK in Rayleigh Fading'</span>,<span class="string">'16QAM in Rayleigh Fading'</span>&#125;)</span><br></pre></td></tr></table></figure><br><img src="https://www.dropbox.com/s/w6ha52xb00pie4z/ber-rayleigh.jpg?raw=1"><p>Full code can be found on <em><a href="https://github.com/elimkwan/MATLAB-BERanalysis" target="_blank" rel="noopener">GITHUB</a></em></p><br><br><br><h3>Key Skills developed:<h3><button>#BER Analysis</button>  <button>#MATLAB</button>  <button>#TeleCommunication</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Using MATLAB code to simulate QPSK communication system, and displaying BER graphs of other modulation schemes. For instance, the program</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Robot War</title>
    <link href="http://elimkwan.github.io/2019/08/05/robotWar/"/>
    <id>http://elimkwan.github.io/2019/08/05/robotWar/</id>
    <published>2019-08-05T00:30:49.000Z</published>
    <updated>2020-11-05T22:12:43.049Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/--dmeGcSdgc" frameborder="0" allowfullscreen></iframe></div><br><br>It is never too late to join Robot War! I am pretty new with 3D modelling and printing, so it took me multiple times to get things right. Our team came 7th out of 14th team and had won the "best worst design". Although we might not necessarily have the coolest bot, it is a truly exciting and fun match!<br><br><img src="https://www.dropbox.com/s/xtnmgwrqg0d2h2d/thumb-robotWar.jpg?raw=1"><br><br><br><h3>Key Skills developed:<h3><button>#Robotics</button>  <button>#3D Modelling</button>  <button>#3D Print</button>  <button>#Inventor</button>  <button>#Team</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/--dmeGcSdgc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
It </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Embedded Programming with TI-RSLK Kit Set</title>
    <link href="http://elimkwan.github.io/2019/08/05/embeddedProgram/"/>
    <id>http://elimkwan.github.io/2019/08/05/embeddedProgram/</id>
    <published>2019-08-05T00:30:30.000Z</published>
    <updated>2020-11-05T22:12:43.047Z</updated>
    
    <content type="html"><![CDATA[<p>In the unit Embedded and Real Time System, I had had the chance to worked with the TI-Robotics-System-Learning-Kit, where I learnt much more about embedded real time system</p><h1 style="color:#7ecaf6;" class="fas fa-briefcase"> Polling Vs Interrupts </h1>The task was to develop a program that allows the robot that has two modes of operations using both polling and interrupts techniques:<li> (Operation 1: Autonomous mode) upon pressing switch SW1, the robot operatesusing predefined route and immediately stop when any of bump switches aretouched.</li><li> (Operation 2: Free-motion mode) upon pressing switch SW2, the robot freely moveforward but will change direction of movement according to the interrupted bumpswitches.</li><li>Measure and compare interrupt latency and polling latency </li><br><br><em>Example of using bitwise operations to program the motor to move:</em><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function: dcMotor_Left</span></span><br><span class="line"><span class="comment">// Description: Drives the left motor forward and the right motor backward</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dcMotor_Left</span><span class="params">(<span class="keyword">uint16_t</span> duty, <span class="keyword">uint32_t</span> period)</span></span>&#123;</span><br><span class="line">    P1-&gt;OUT &amp;= ~<span class="number">0xC0</span>;</span><br><span class="line">    P2-&gt;OUT &amp;= ~<span class="number">0xC0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Motor Turn Left</span></span><br><span class="line">    P1-&gt;DIR |= <span class="number">0x80</span>;</span><br><span class="line">    P1-&gt;OUT |= <span class="number">0x80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;period; i++)&#123;</span><br><span class="line">      P2-&gt;OUT |= <span class="number">0xC0</span>;   <span class="comment">// on</span></span><br><span class="line">      vTaskDelay( <span class="number">1</span> );</span><br><span class="line">      P2-&gt;OUT &amp;= ~<span class="number">0xC0</span>;  <span class="comment">// off</span></span><br><span class="line">      vTaskDelay( <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    P1-&gt;OUT &amp;= ~<span class="number">0xC0</span>;</span><br><span class="line">    P2-&gt;OUT &amp;= ~<span class="number">0xC0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h1 style="color:#7ecaf6;" class="fas fa-briefcase">  Real-Time Operating System (RTOS) with Round Robin Algorithm </h1><li> Use Real-time operating system (RTOS) to achieve Autonomous mode and Free-motion mode while having music playing simultaneously</li><li> Use of Round Robin algorithm as scheduling mechanism in RTOS.</li><li> Scheduling CPU usage and managing shared resources </li><li> Use of semaphore in RTOS.</li><br><br>Snapshot of the code:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Switch_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// negative logic built-in Button 1 connected to P1.1</span></span><br><span class="line">    <span class="comment">// negative logic built-in Button 2 connected to P1.4</span></span><br><span class="line">    P1-&gt;SEL0 &amp;= ~<span class="number">0x12</span>;</span><br><span class="line">    P1-&gt;SEL1 &amp;= ~<span class="number">0x12</span>;      <span class="comment">// configure P1.4 and P1.1 as GPIO</span></span><br><span class="line">    P1-&gt;DIR &amp;= ~<span class="number">0x12</span>;       <span class="comment">// make P1.4 and P1.1 in</span></span><br><span class="line">    P1-&gt;REN |= <span class="number">0x12</span>;        <span class="comment">// enable pull resistors on P1.4 and P1.1</span></span><br><span class="line">    P1-&gt;OUT |= <span class="number">0x12</span>;        <span class="comment">// P1.4 and P1.1 are pull-up</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskPlaySong</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>&#123;</span><br><span class="line">    init_song_pwm();</span><br><span class="line">    <span class="keyword">for</span>( ;; )&#123;</span><br><span class="line">        play_song();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This task got priority 2</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskMasterThread</span><span class="params">( <span class="keyword">void</span> *pvParameters )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> pressed = <span class="number">0</span>;</span><br><span class="line">        ColorLED_Init();</span><br><span class="line"></span><br><span class="line">        RedLED_Init();</span><br><span class="line">        REDLED = <span class="number">1</span>; <span class="comment">//Switch on the LED</span></span><br><span class="line"></span><br><span class="line">        pressed = SW1IN | SW2IN;</span><br><span class="line">        <span class="keyword">while</span>(!pressed)&#123;                  <span class="comment">// Wait for SW2 switch</span></span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++);  <span class="comment">// Wait here waiting for command</span></span><br><span class="line">            REDLED = !REDLED;           <span class="comment">// The red LED is blinking</span></span><br><span class="line">            pressed = SW1IN | SW2IN;</span><br><span class="line">            <span class="keyword">if</span> (SW1IN)&#123;</span><br><span class="line">                mode = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (SW2IN)&#123;</span><br><span class="line">                mode = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        REDLED = !REDLED; <span class="comment">//i.e. REDLED = 0;</span></span><br><span class="line">        vTaskSuspend(<span class="literal">NULL</span>); <span class="comment">// suspend itself</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------Interrupt functions -----------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BumpEdgeTrigger_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    P4-&gt;SEL0 &amp;= ~<span class="number">0xED</span>;</span><br><span class="line">    P4-&gt;SEL1 &amp;= ~<span class="number">0xED</span>;      <span class="comment">// configure as GPIO</span></span><br><span class="line">    P4-&gt;DIR &amp;= ~<span class="number">0xED</span>;       <span class="comment">// make in</span></span><br><span class="line">    P4-&gt;REN |= <span class="number">0xED</span>;        <span class="comment">// enable pull resistors</span></span><br><span class="line">    P4-&gt;OUT |= <span class="number">0xED</span>;        <span class="comment">// pull-up</span></span><br><span class="line">    P4-&gt;IES |= <span class="number">0xED</span>;        <span class="comment">// falling edge event</span></span><br><span class="line">    P4-&gt;IFG &amp;= ~<span class="number">0xED</span>;       <span class="comment">// clear flag</span></span><br><span class="line">    P4-&gt;IE |= <span class="number">0xED</span>;         <span class="comment">// arm the interrupt</span></span><br><span class="line">    <span class="comment">// priority 2 on port4</span></span><br><span class="line">    NVIC-&gt;IP[<span class="number">9</span>] = (NVIC-&gt;IP[<span class="number">9</span>]&amp;<span class="number">0xFF00FFFF</span>)|<span class="number">0x00D00000</span>; <span class="comment">//Numerical Priority 6</span></span><br><span class="line">    <span class="comment">// enable interrupt 38 in NVIC on port4</span></span><br><span class="line">    NVIC-&gt;ISER[<span class="number">1</span>] = <span class="number">0x00000040</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Port4_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    P4-&gt;SEL0 &amp;= ~<span class="number">0xED</span>;</span><br><span class="line">    P4-&gt;SEL1 &amp;= ~<span class="number">0xED</span>;      <span class="comment">// configure as GPIO</span></span><br><span class="line">    P4-&gt;DIR &amp;= ~<span class="number">0xED</span>;       <span class="comment">// set as input</span></span><br><span class="line">    P4-&gt;REN |= <span class="number">0xED</span>;        <span class="comment">// enable pull resistors</span></span><br><span class="line">    P4-&gt;OUT |= <span class="number">0xED</span>;        <span class="comment">// set xx are pull-up</span></span><br><span class="line">    <span class="comment">//see if it works?</span></span><br><span class="line">    P4-&gt;IES |= <span class="number">0xED</span>;      <span class="comment">// falling edge event</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PORT4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// Interrupt Vector of Port4</span></span><br><span class="line">    <span class="comment">// Shared Variable</span></span><br><span class="line">    bumpSwitch_status = P4-&gt;IV;      <span class="comment">// 2*(n+1) where n is highest priority</span></span><br><span class="line"></span><br><span class="line">    BaseType_t xHigher;</span><br><span class="line">    xHigher = pdFALSE;</span><br><span class="line"></span><br><span class="line">    P4-&gt;IFG &amp;= ~<span class="number">0xED</span>; <span class="comment">// clear flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    xSemaphoreGiveFromISR(xBSemaphore, &amp;xHigher);</span><br><span class="line"><span class="comment">//    the interrupt handler will give a semaphore</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputLED_response_ISR</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> bumpSwitch_status)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> TickType_t xShortBlock = pdMS_TO_TICKS( <span class="number">300</span> );</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(bumpSwitch_status)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x02</span>: <span class="comment">// Bump switch 1</span></span><br><span class="line">          Port2_Output2(SKYBLUE);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x06</span>:<span class="comment">// Bump switch 2</span></span><br><span class="line">          Port2_Output2(RED);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x08</span>: <span class="comment">// Bump switch 3</span></span><br><span class="line">          Port2_Output2(PINK);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x0C</span>: <span class="comment">// Bump switch 4</span></span><br><span class="line">          Port2_Output2(YELLOW);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x0E</span>: <span class="comment">// Bump switch 5</span></span><br><span class="line">          Port2_Output2(GREEN);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10</span>: <span class="comment">// Bump switch 6</span></span><br><span class="line">          Port2_Output2(BLUE);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xED</span>: <span class="comment">// neither switch pressed</span></span><br><span class="line">          Port2_Output2(COLOUROFF);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          Port2_Output2(WHITE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++);</span><br><span class="line">    Port2_Output2(COLOUROFF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskInterrupt</span><span class="params">(<span class="keyword">void</span> *pvParamters)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Initialise the interrupt</span></span><br><span class="line">    EnableInterrupts();       <span class="comment">// Clear the I bit</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( ;; )&#123;</span><br><span class="line">        xSemaphoreTake(xBSemaphore, portMAX_DELAY);</span><br><span class="line">        dcMotor_Stop(<span class="number">1</span>);</span><br><span class="line">        vTaskSuspend(taskHandle_Main);</span><br><span class="line">        vTaskSuspend(taskHandle_PlaySong);</span><br><span class="line">        <span class="comment">//Make sure the motor is stopped</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//change colours - value stored in the global variable</span></span><br><span class="line">        outputLED_response_ISR(bumpSwitch_status);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//look at which mode we are on</span></span><br><span class="line">        <span class="keyword">if</span> (mode == <span class="number">1</span>)&#123;</span><br><span class="line">            dcMotor_Stop(<span class="number">1</span>);</span><br><span class="line">            stop = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode == <span class="number">2</span>)&#123;</span><br><span class="line">            dcMotor_response_interrupt(bumpSwitch_status);</span><br><span class="line">            vTaskResume(taskHandle_PlaySong);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vTaskResume(taskHandle_Main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskMain</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>&#123;</span><br><span class="line">    dcMotor_Init();</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ;; )&#123;</span><br><span class="line">        <span class="keyword">if</span> (SW1IN)&#123;</span><br><span class="line">            mode = <span class="number">1</span>;</span><br><span class="line">            stop = <span class="number">0</span>;</span><br><span class="line">            vTaskResume(taskHandle_PlaySong);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (SW2IN)&#123;</span><br><span class="line">            mode = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mode == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// predefined route, stop when pressed</span></span><br><span class="line">            <span class="keyword">if</span> (!stop)&#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (stop == <span class="number">0</span> &amp;&amp; j &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                    dcMotor_Backward(<span class="number">500</span>, <span class="number">1000</span>);</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (stop == <span class="number">0</span> &amp;&amp; j &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                    dcMotor_Left(<span class="number">500</span>, <span class="number">1000</span>);</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dcMotor_Stop(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//do something else</span></span><br><span class="line">            dcMotor_Forward(<span class="number">500</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------Interrupt functions -----------------------</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//--------------------------Polling functions -----------------------</span></span><br><span class="line"><span class="comment">// a static void function for taskReadInputSwitch</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskReadInputSwitch</span><span class="params">( <span class="keyword">void</span> *pvParameters )</span></span>&#123;</span><br><span class="line">    <span class="comment">// This function act as a switch press once to stop playing,</span></span><br><span class="line">    <span class="comment">// press second time to resume</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> i_SW1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( ;; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SW1IN == <span class="number">1</span>) &#123; <span class="comment">// 1 means being pressed</span></span><br><span class="line">            mode=<span class="number">1</span>;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            i_SW1 ^= <span class="number">1</span>;                 <span class="comment">// toggle the variable i_SW1</span></span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++);  <span class="comment">// this waiting loop is used</span></span><br><span class="line">            <span class="comment">// to prevent the switch bounce.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (SW2IN == <span class="number">1</span>)&#123;</span><br><span class="line">            mode=<span class="number">2</span>;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++);  <span class="comment">// this waiting loop is used</span></span><br><span class="line">            <span class="comment">// to prevent the switch bounce.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> create a static void function for taskBumpSwitch</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskBumpSwitch</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> initialise bump switches</span></span><br><span class="line">    BumpSwitch_Init();</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Read the input of bump switches forever:</span></span><br><span class="line">    <span class="comment">//       Continuously read the 6 bump switches in a loop,</span></span><br><span class="line">    <span class="comment">//       and return it to the "bumpSwitch_status" variable.</span></span><br><span class="line">    <span class="comment">//       Note that the bumpSwitch_status is a global variable,</span></span><br><span class="line">    <span class="comment">//       so do not declare it again here locally.</span></span><br><span class="line">    <span class="keyword">for</span>( ;; )&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> use bumpSwitch_status as the variable and</span></span><br><span class="line">        <span class="comment">//       use Bump_Read_Input to read the input</span></span><br><span class="line">        bumpSwitch_status = Bump_Read_Input();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> create a static void function for taskDisplayOutputLED</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskDisplayOutputLED</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( ;; )&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> use outputLED_response as the function and</span></span><br><span class="line">        <span class="comment">//       use bumpSwitch_status as the parameter</span></span><br><span class="line">        outputLED_response(bumpSwitch_status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> create a static void function for taskdcMotor</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskdcMotor</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> initialise the DC Motor</span></span><br><span class="line">    dcMotor_Init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> use a polling that continuously read from the bumpSwitch_status,</span></span><br><span class="line">    <span class="comment">//       and run this forever in a while loop.</span></span><br><span class="line">    <span class="comment">//       use dcMotor_response and bumpSwitch_status for the parameter</span></span><br><span class="line">    <span class="keyword">for</span> ( ;; )&#123;</span><br><span class="line">        <span class="keyword">if</span> (mode==<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            flag=dcMotor_stop_flag(bumpSwitch_status);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">                 dcMotor_Stop(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            vTaskSuspend(taskHandle_PlaySong);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode==<span class="number">2</span>)&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            dcMotor_response(bumpSwitch_status);</span><br><span class="line">            vTaskResume(taskHandle_PlaySong);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------Polling functions -----------------------</span></span><br></pre></td></tr></table></figure><p>Full code can be found on <em><a href="https://github.com/elimkwan/EmbeddedSystemProgramming" target="_blank" rel="noopener">GITHUB</a></em></p><br><br><br><h3>Key Skills developed:<h3><button>#Embedded Real Time System</button>  <button>#Embedded Programming</button>  <br><br><button>#Low level programming</button>  <button>#TI-RSLK Kit Set</button> <br><br><button>#Real-Time Operating System</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;
In the unit Embedded and Real Time System, I had had the chance to worked with the TI-Robotics-System-Learning-Kit, where I learnt much </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AHB Bridge</title>
    <link href="http://elimkwan.github.io/2019/08/05/ahbBridge/"/>
    <id>http://elimkwan.github.io/2019/08/05/ahbBridge/</id>
    <published>2019-08-05T00:30:29.000Z</published>
    <updated>2020-11-05T22:12:43.046Z</updated>
    
    <content type="html"><![CDATA[<p>The aim of the project is to replace the Leon3 open source soft processor with ARM'sCortex M0 processor. Since Leon3 processor uses AHB interface and Cortex M0 usesAHB-LITE, a bridge is required for the Cortex M0 to switch between the protocols,communicating with the peripherals found in the system on chip (SoC) Design.The main objectives of the project can be summarised as follows: <li>Replace Leon 3 processor with Cortex M0 processor, producing functional code forboth simulation and implementation.</li> <li>Learn the constraints in replacing processors and the relevant coding and timingissues.</li> <li>Gain understanding on the signicance of two important protocols which are heavilyused in many applications i.e AHB and AHB LITE.</li></p><br><br><br><h3>Key Skills developed:<h3><button>#Embedded Programming</button>  <button>#Low level programming</button>  <button>#TI-RSLK Kit Set</button>  <button>#Team</button> </h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;
The aim of the project is to replace the Leon3 open source soft processor with ARM&#39;s
Cortex M0 processor. Since Leon3 processor uses AHB</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PCB Prototype at Kazoo</title>
    <link href="http://elimkwan.github.io/2019/08/05/kazooPcb/"/>
    <id>http://elimkwan.github.io/2019/08/05/kazooPcb/</id>
    <published>2019-08-05T00:30:09.000Z</published>
    <updated>2020-11-05T22:12:43.048Z</updated>
    
    <content type="html"><![CDATA[<p>I worked at <a href="https://kazootechnology.com/" target="_blank" rel="noopener">Kazoo Technology</a> last summer. It is a hardware startup that develop alternative solutions to Near-Field Technology.</p><p>I was responsible for improving the layout of their next phase product, and building smart card protocol, which involved drawing, assembling and soldering Printed Circuit Board and building a simple app for testing product’s transmission bit rate.</p><p>News:<br><a href="https://www.hkstp.org/en/about-us/press-room/four-hong-kong-science-park-companies-pick-up-ces-innovation-awards/" target="_blank" rel="noopener">https://www.hkstp.org/en/about-us/press-room/four-hong-kong-science-park-companies-pick-up-ces-innovation-awards/</a></p><br><br><br><h3>Key Skills developed:<h3><button>#Pcb Prototype</button>  <button>#Hardware Sensor</button>  <button>#Soldering</button>  <button>#Communicate with manufacturer</button>  <button>#iOS</button>  <button>#Python Data Analysys (BER)</button><br><br></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I worked at &lt;a href=&quot;https://kazootechnology.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kazoo Technology&lt;/a&gt; last summer. It is a hardware star</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Peak Detector in VHDL</title>
    <link href="http://elimkwan.github.io/2019/08/05/vhdlPeak/"/>
    <id>http://elimkwan.github.io/2019/08/05/vhdlPeak/</id>
    <published>2019-08-05T00:29:53.000Z</published>
    <updated>2020-11-05T22:12:43.049Z</updated>
    
    <content type="html"><![CDATA[<p>The peak detector processes data sequence and returns the peak byte along with the three bytes that precede and follow it. The design was simulated with VHDL program and implemented on Nexys 3 development board with a Spartan 6 device. My main responsibility was to implement the data processor which:<li>    Analysed bytes from data generator and output the peak byte of the sequence;</li><li>    Maintained the API between different modules in the system;</li><li>    Took care of various handshaking protocol.</li>The project familiarised me with real time data processing, concurrent programming and computation efficiency. </p><h3>Key Skills developed:<h3><button>#VHDL</button>  <button>Concurrent Programming</button> <button>#FPGA</button>  <br><br><button>#Team</button>  <button>#Time Management</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;
The peak detector processes data sequence and returns the peak byte along with the three bytes that precede and follow it. The design wa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chess in Python</title>
    <link href="http://elimkwan.github.io/2019/08/05/pythonChess/"/>
    <id>http://elimkwan.github.io/2019/08/05/pythonChess/</id>
    <published>2019-08-05T00:29:40.000Z</published>
    <updated>2020-11-05T22:12:43.049Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/ox8TSVTOCT0" frameborder="0" allowfullscreen></iframe></div><br><br><h3>Key Skills developed:<h3><button>#Python</button>  <button>#Programming</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/ox8TSVTOCT0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C Decompiler</title>
    <link href="http://elimkwan.github.io/2019/08/05/cCompiler/"/>
    <id>http://elimkwan.github.io/2019/08/05/cCompiler/</id>
    <published>2019-08-05T00:29:30.000Z</published>
    <updated>2020-11-05T22:12:43.047Z</updated>
    
    <content type="html"><![CDATA[<p>It was one of my projects in first year. The program translates compiled files written in machine code and decompiles them into a ZX256 assembly representation. The project allowed me to gain a better understanding on fundamental programming concepts.</p><p>For instance, below is command for decompliing hello.out file into assembly code, and the output are printed out as follows.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$./asmdump.exe tests/hello.out</span><br><span class="line">        db <span class="string">"Hello world!\n"</span></span><br><span class="line">main:   mov %a,<span class="number">0x04</span></span><br><span class="line">        mov %b,<span class="number">0x01</span></span><br><span class="line">        mov %c,<span class="number">0x00</span></span><br><span class="line">        mov %d,<span class="number">0x0d</span></span><br><span class="line">        syscall</span><br><span class="line">        mov %a,<span class="number">0x01</span></span><br><span class="line">        syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><a href="https://github.com/elimkwan/C_Decompiler-Interpreter" target="_blank" rel="noopener">#GITHUB REPO<br></a></em></p><br><br><h3>Key Skills developed:<h3><button>#C</button>  <button>#Programming</button>  <button>#Computer Architecture</button></h3></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It was one of my projects in first year. The program translates compiled files written in machine code and decompiles them into a ZX256 a</summary>
      
    
    
    
    
  </entry>
  
</feed>
